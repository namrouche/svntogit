Utilisation de "enableSnapshot" :
AbstractBasePublishedDocumentFactory
	.ENABLE_SNAPSHOT = "enableSnapshot"
	.isSnapshotingEnabled() --> return true si getParameter(ENABLE_SNAPSHOT)==true
	.init() --> positionne Map<String, String> parameters

PublishActionsBean.publisherService.getPublicationTree(
                        getCurrentPublicationTreeNameForPublishing(),
                        documentManager, null,
                        navigationContext.getCurrentDocument()); --> null est ce parameters

Notes :
AbstractBasePublishedDocumentFactory
	.needToVersionDocument(DocumentModel doc) --> teste si on n'est pas déjà sur une version et que le document est versionnable
	.isSnapshotingEnabled() --> teste si "enableSnapshot" est à true

Quel publisher par défaut :
org.nuxeo.ecm.platform.publisher.impl.service.PublisherServiceImpl
	org.nuxeo.ecm.platform.publisher.jbpm.CoreProxyWithWorkflowFactory

Notes :
	session.publishDocument(docToPublish, sectionToPublishTo, overwriteProxy) --> overwriteProxy dans les parametres ?

Au final on appelle AbstractSession.publishDocument() qui fait une version si le document passé en paramètre n'est pas déjà un proxy.

La pile :
	PublishActionsBean.doPublish()
	AbstractBasePublicationTree.publish()
	AbstractBasePublishedDocumentFactory.publishDocument()
	CoreProxyWithWorkflowFactory.publishDocument()
	CoreProxyWithWorkflowFactory.publish()
	UnrestrictedSessionRunner.runUnrestricted()
	PublishUnrestricted.run()
	AbstractSession.publishDocument()