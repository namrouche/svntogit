diff -r ceafd39e2bbc nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/NXQLQueryMaker.java
--- a/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/NXQLQueryMaker.java	Wed Mar 17 20:37:04 2010 +0100
+++ b/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/NXQLQueryMaker.java	Fri Apr 16 14:35:44 2010 +0200
@@ -456,6 +456,8 @@
              * Security check.
              */
 
+            // begin esup
+            /*
             if (queryFilter.getPrincipals() != null) {
                 Serializable principals = queryFilter.getPrincipals();
                 Serializable permissions = queryFilter.getPermissions();
@@ -464,7 +466,6 @@
                     permissions = StringUtils.join((String[]) permissions, '|');
                 }
                 if (dialect.supportsReadAcl()) {
-                    /* optimized read acl */
                     whereClauses.add(dialect.getReadAclsCheckSql("r.acl_id"));
                     whereParams.add(principals);
                     joins.add(String.format("%s AS r ON %s = r.id",
@@ -475,7 +476,9 @@
                     whereParams.add(permissions);
                 }
             }
-
+            */
+            // end esup
+            
             /*
              * Columns on which to do ordering.
              */
@@ -536,11 +539,37 @@
             select.setFrom(from);
         }
         select.setOrderBy(orderBy);
+        
+        // begin esup
+        String sql = select.getStatement();
+        log.debug("makeQuery :: before ori-oai patch sql="+sql);
+        if (queryFilter.getPrincipals() != null) {
+        	String selectName = "esupselect";
+        	String securityCheckSql = dialect.getSecurityCheckSql("`"+selectName+"`.`id`");
+        	Serializable principals;
+        	Serializable permissions;
+        	if (dialect.supportsArrays()) {
+        		principals = queryFilter.getPrincipals();
+        		permissions = queryFilter.getPermissions();
+        	} else {
+        		principals = StringUtils.join(queryFilter.getPrincipals(), '|');
+        		permissions = StringUtils.join(queryFilter.getPermissions(),
+        		'|');
+        	}
+        	selectParams.add(principals);
+        	selectParams.add(permissions);
+        	log.debug("makeQuery :: securityCheckSql="+securityCheckSql);
+        	log.debug("makeQuery :: selectParams="+selectParams);
+        	sql = "SELECT id FROM (" + sql + ") AS " + selectName + " WHERE " + securityCheckSql;
+        	log.debug("makeQuery :: after esup patch sql="+sql);
+        }
+        // end esup
 
         List<Column> whatColumns = Collections.singletonList(hier.getColumn(model.MAIN_KEY));
         Query q = new Query();
-        q.selectInfo = new SQLInfoSelect(select.getStatement(), whatColumns,
-                null, null);
+        // begin esup
+        q.selectInfo = new SQLInfoSelect(sql, whatColumns, null, null);
+        // end esup
         q.selectParams = selectParams;
         return q;
     }
